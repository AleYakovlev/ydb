#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ signal handler –¥–ª—è DC nemesis.
–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É nemesis –∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–º.
"""

import time
import signal
import os
import sys
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ú–æ–∫-–∫–ª–∞—Å—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockCluster:
    def __init__(self):
        self.nodes = {
            1: MockNode("host1", "zone-a"),
            2: MockNode("host2", "zone-b"), 
            3: MockNode("host3", "zone-c")
        }
        self._ExternalKiKiMRCluster__yaml_config = {
            'hosts': [
                {'name': 'host1', 'location': {'data_center': 'zone-a'}},
                {'name': 'host2', 'location': {'data_center': 'zone-b'}},
                {'name': 'host3', 'location': {'data_center': 'zone-c'}}
            ]
        }

class MockNode:
    def __init__(self, host, dc):
        self.host = host
        self.dc = dc
        self._stopped = False
        
    def stop(self):
        self._stopped = True
        print(f"[MOCK] Stopped node {self.host}")
        
    def start(self):
        self._stopped = False
        print(f"[MOCK] Started node {self.host}")
        
    def ssh_command(self, cmd, raise_on_error=True):
        print(f"[MOCK] SSH command on {self.host}: {cmd}")
        return 0

def test_signal_handler():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç signal handler –¥–ª—è DC nemesis"""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –∫–ª–∞—Å—Å—ã
    from hosts_network import DataCenterNetworkNemesis, DataCenterRouteUnreachableNemesis
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ signal handler –¥–ª—è DC nemesis")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–ª–∞—Å—Ç–µ—Ä
    cluster = MockCluster()
    
    # –°–æ–∑–¥–∞–µ–º nemesis (–æ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è)
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ nemesis...")
    network_nemesis = DataCenterNetworkNemesis(cluster, schedule=(5, 10))
    route_nemesis = DataCenterRouteUnreachableNemesis(cluster, schedule=(5, 10))
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print("\n‚öôÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    network_nemesis.prepare_state()
    route_nemesis.prepare_state()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å nemesis
    print("\nüéØ –°–∏–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö nemesis...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —á—Ç–æ network_nemesis –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–æ–¥—ã
    network_nemesis._current_dc = "zone-a"
    network_nemesis._stopped_nodes = [(1, cluster.nodes[1])]
    network_nemesis._stop_time = time.time()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —á—Ç–æ route_nemesis –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –º–∞—Ä—à—Ä—É—Ç—ã  
    route_nemesis._current_dc = "zone-b"
    route_nemesis._blocked_routes = [
        {'node': cluster.nodes[2], 'host': 'host2', 'temp_file': '/tmp/test_routes'}
    ]
    route_nemesis._block_time = time.time()
    
    print(f"Network nemesis state: stopped_nodes={len(network_nemesis._stopped_nodes)}, current_dc={network_nemesis._current_dc}")
    print(f"Route nemesis state: blocked_routes={len(route_nemesis._blocked_routes)}, current_dc={route_nemesis._current_dc}")
    
    print(f"\n‚è∞ –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω SIGTERM (PID: {os.getpid()})")
    print("Signal handler –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
    def send_signal():
        time.sleep(3)
        print(f"\nüö® –û—Ç–ø—Ä–∞–≤–ª—è—é SIGTERM –ø—Ä–æ—Ü–µ—Å—Å—É {os.getpid()}")
        os.kill(os.getpid(), signal.SIGTERM)
    
    import threading
    timer_thread = threading.Thread(target=send_signal)
    timer_thread.daemon = True
    timer_thread.start()
    
    # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª
    try:
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞...")
        time.sleep(10)  # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, signal handler –¥–æ–ª–∂–µ–Ω –ø—Ä–µ—Ä–≤–∞—Ç—å
        print("‚ùå ERROR: –°–∏–≥–Ω–∞–ª –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω!")
    except KeyboardInterrupt:
        print("‚ùå –ü–æ–ª—É—á–µ–Ω SIGINT –≤–º–µ—Å—Ç–æ SIGTERM")

if __name__ == "__main__":
    test_signal_handler() 